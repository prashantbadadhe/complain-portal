{"remainingRequest":"G:\\projects\\complain-portal\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\complain-portal\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js!G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\department\\department-update.tsx","dependencies":[{"path":"G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\department\\department-update.tsx","mtime":1543222006000},{"path":"G:\\projects\\complain-portal\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"G:\\projects\\complain-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1569703604290},{"path":"G:\\projects\\complain-portal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\projects\\complain-portal\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities as getBranches } from 'app/entities/branch/branch.reducer';\r\nimport { getEntity, updateEntity, createEntity, reset } from './department.reducer';\r\nvar DepartmentUpdate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DepartmentUpdate, _super);\r\n    function DepartmentUpdate(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.saveEntity = function (event, errors, values) {\r\n            if (errors.length === 0) {\r\n                var departmentEntity = _this.props.departmentEntity;\r\n                var entity = tslib_1.__assign({}, departmentEntity, values);\r\n                if (_this.state.isNew) {\r\n                    _this.props.createEntity(entity);\r\n                }\r\n                else {\r\n                    _this.props.updateEntity(entity);\r\n                }\r\n            }\r\n        };\r\n        _this.handleClose = function () {\r\n            _this.props.history.push('/entity/department');\r\n        };\r\n        _this.state = {\r\n            branchId: '0',\r\n            isNew: !_this.props.match.params || !_this.props.match.params.id\r\n        };\r\n        return _this;\r\n    }\r\n    DepartmentUpdate.prototype.componentWillUpdate = function (nextProps, nextState) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.handleClose();\r\n        }\r\n    };\r\n    DepartmentUpdate.prototype.componentDidMount = function () {\r\n        if (this.state.isNew) {\r\n            this.props.reset();\r\n        }\r\n        else {\r\n            this.props.getEntity(this.props.match.params.id);\r\n        }\r\n        this.props.getBranches();\r\n    };\r\n    DepartmentUpdate.prototype.render = function () {\r\n        var _a = this.props, departmentEntity = _a.departmentEntity, branches = _a.branches, loading = _a.loading, updating = _a.updating;\r\n        var isNew = this.state.isNew;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"complainportalApp.department.home.createOrEditLabel\" }, \"Create or edit a Department\"))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : departmentEntity, onSubmit: this.saveEntity },\r\n                    !isNew ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"id\" }, \"ID\"),\r\n                        React.createElement(AvInput, { id: \"department-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"departmentNameLabel\", for: \"departmentName\" }, \"Department Name\"),\r\n                        React.createElement(AvField, { id: \"department-departmentName\", type: \"text\", name: \"departmentName\", validate: {\r\n                                required: { value: true, errorMessage: 'This field is required.' }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"phoneLabel\", for: \"phone\" }, \"Phone\"),\r\n                        React.createElement(AvField, { id: \"department-phone\", type: \"text\", name: \"phone\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"emailLabel\", for: \"email\" }, \"Email\"),\r\n                        React.createElement(AvField, { id: \"department-email\", type: \"text\", name: \"email\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"branch.id\" }, \"Branch\"),\r\n                        React.createElement(AvInput, { id: \"department-branch\", type: \"select\", className: \"form-control\", name: \"branch.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            branches\r\n                                ? branches.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.id)); })\r\n                                : null)),\r\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/entity/department\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" }, \"Back\")),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0 Save\")))))));\r\n    };\r\n    return DepartmentUpdate;\r\n}(React.Component));\r\nexport { DepartmentUpdate };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    branches: storeState.branch.entities,\r\n    departmentEntity: storeState.department.entity,\r\n    loading: storeState.department.loading,\r\n    updating: storeState.department.updating,\r\n    updateSuccess: storeState.department.updateSuccess\r\n}); };\r\nvar mapDispatchToProps = {\r\n    getBranches: getBranches,\r\n    getEntity: getEntity,\r\n    updateEntity: updateEntity,\r\n    createEntity: createEntity,\r\n    reset: reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DepartmentUpdate);\r\n",{"version":3,"file":"G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\department\\department-update.tsx","sourceRoot":"","sources":["G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js!G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\department\\department-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Col, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport { ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IRootState } from 'app/shared/reducers';\n\nimport { IBranch } from 'app/shared/model/branch.model';\nimport { getEntities as getBranches } from 'app/entities/branch/branch.reducer';\nimport { getEntity, updateEntity, createEntity, reset } from './department.reducer';\nimport { IDepartment } from 'app/shared/model/department.model';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from 'app/shared/util/date-utils';\nimport { mapIdList } from 'app/shared/util/entity-utils';\n\nexport interface IDepartmentUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n\nexport interface IDepartmentUpdateState {\n  isNew: boolean;\n  branchId: string;\n}\n\nexport class DepartmentUpdate extends React.Component<IDepartmentUpdateProps, IDepartmentUpdateState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      branchId: '0',\n      isNew: !this.props.match.params || !this.props.match.params.id\n    };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\n      this.handleClose();\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.isNew) {\n      this.props.reset();\n    } else {\n      this.props.getEntity(this.props.match.params.id);\n    }\n\n    this.props.getBranches();\n  }\n\n  saveEntity = (event, errors, values) => {\n    if (errors.length === 0) {\n      const { departmentEntity } = this.props;\n      const entity = {\n        ...departmentEntity,\n        ...values\n      };\n\n      if (this.state.isNew) {\n        this.props.createEntity(entity);\n      } else {\n        this.props.updateEntity(entity);\n      }\n    }\n  };\n\n  handleClose = () => {\n    this.props.history.push('/entity/department');\n  };\n\n  render() {\n    const { departmentEntity, branches, loading, updating } = this.props;\n    const { isNew } = this.state;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"complainportalApp.department.home.createOrEditLabel\">Create or edit a Department</h2>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm model={isNew ? {} : departmentEntity} onSubmit={this.saveEntity}>\n                {!isNew ? (\n                  <AvGroup>\n                    <Label for=\"id\">ID</Label>\n                    <AvInput id=\"department-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label id=\"departmentNameLabel\" for=\"departmentName\">\n                    Department Name\n                  </Label>\n                  <AvField\n                    id=\"department-departmentName\"\n                    type=\"text\"\n                    name=\"departmentName\"\n                    validate={{\n                      required: { value: true, errorMessage: 'This field is required.' }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"phoneLabel\" for=\"phone\">\n                    Phone\n                  </Label>\n                  <AvField id=\"department-phone\" type=\"text\" name=\"phone\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"emailLabel\" for=\"email\">\n                    Email\n                  </Label>\n                  <AvField id=\"department-email\" type=\"text\" name=\"email\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"branch.id\">Branch</Label>\n                  <AvInput id=\"department-branch\" type=\"select\" className=\"form-control\" name=\"branch.id\">\n                    <option value=\"\" key=\"0\" />\n                    {branches\n                      ? branches.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.id}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <Button tag={Link} id=\"cancel-save\" to=\"/entity/department\" replace color=\"info\">\n                  <FontAwesomeIcon icon=\"arrow-left\" />&nbsp;\n                  <span className=\"d-none d-md-inline\">Back</span>\n                </Button>\n                &nbsp;\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\n                  <FontAwesomeIcon icon=\"save\" />&nbsp; Save\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  branches: storeState.branch.entities,\n  departmentEntity: storeState.department.entity,\n  loading: storeState.department.loading,\n  updating: storeState.department.updating,\n  updateSuccess: storeState.department.updateSuccess\n});\n\nconst mapDispatchToProps = {\n  getBranches,\n  getEntity,\n  updateEntity,\n  createEntity,\n  reset\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DepartmentUpdate);\n"]}]}