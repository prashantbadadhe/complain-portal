{"remainingRequest":"G:\\projects\\complain-portal\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\complain-portal\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js!G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\complain\\complain-update.tsx","dependencies":[{"path":"G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\complain\\complain-update.tsx","mtime":1543222006000},{"path":"G:\\projects\\complain-portal\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"G:\\projects\\complain-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1569703604290},{"path":"G:\\projects\\complain-portal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\projects\\complain-portal\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { setFileData, openFile, byteSize } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities as getDepartments } from 'app/entities/department/department.reducer';\r\nimport { getEntities as getStatuses } from 'app/entities/status/status.reducer';\r\nimport { getEntity, updateEntity, createEntity, setBlob, reset } from './complain.reducer';\r\nvar ComplainUpdate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ComplainUpdate, _super);\r\n    function ComplainUpdate(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.onBlobChange = function (isAnImage, name) { return function (event) {\r\n            setFileData(event, function (contentType, data) { return _this.props.setBlob(name, data, contentType); }, isAnImage);\r\n        }; };\r\n        _this.clearBlob = function (name) { return function () {\r\n            _this.props.setBlob(name, undefined, undefined);\r\n        }; };\r\n        _this.saveEntity = function (event, errors, values) {\r\n            if (errors.length === 0) {\r\n                var complainEntity = _this.props.complainEntity;\r\n                var entity = tslib_1.__assign({}, complainEntity, values);\r\n                if (_this.state.isNew) {\r\n                    _this.props.createEntity(entity);\r\n                }\r\n                else {\r\n                    _this.props.updateEntity(entity);\r\n                }\r\n            }\r\n        };\r\n        _this.handleClose = function () {\r\n            _this.props.history.push('/entity/complain');\r\n        };\r\n        _this.state = {\r\n            departmentId: '0',\r\n            statusId: '0',\r\n            isNew: !_this.props.match.params || !_this.props.match.params.id\r\n        };\r\n        return _this;\r\n    }\r\n    ComplainUpdate.prototype.componentWillUpdate = function (nextProps, nextState) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.handleClose();\r\n        }\r\n    };\r\n    ComplainUpdate.prototype.componentDidMount = function () {\r\n        if (this.state.isNew) {\r\n            this.props.reset();\r\n        }\r\n        else {\r\n            this.props.getEntity(this.props.match.params.id);\r\n        }\r\n        this.props.getDepartments();\r\n        this.props.getStatuses();\r\n    };\r\n    ComplainUpdate.prototype.render = function () {\r\n        var _a = this.props, complainEntity = _a.complainEntity, departments = _a.departments, statuses = _a.statuses, loading = _a.loading, updating = _a.updating;\r\n        var isNew = this.state.isNew;\r\n        var img = complainEntity.img, imgContentType = complainEntity.imgContentType;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"complainportalApp.complain.home.createOrEditLabel\" }, \"Create or edit a Complain\"))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : complainEntity, onSubmit: this.saveEntity },\r\n                    !isNew ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"id\" }, \"ID\"),\r\n                        React.createElement(AvInput, { id: \"complain-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"detailsLabel\", for: \"details\" }, \"Details\"),\r\n                        React.createElement(AvField, { id: \"complain-details\", type: \"text\", name: \"details\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(AvGroup, null,\r\n                            React.createElement(Label, { id: \"imgLabel\", for: \"img\" }, \"Img\"),\r\n                            React.createElement(\"br\", null),\r\n                            img ? (React.createElement(\"div\", null,\r\n                                React.createElement(\"a\", { onClick: openFile(imgContentType, img) },\r\n                                    React.createElement(\"img\", { src: \"data:\" + imgContentType + \";base64,\" + img, style: { maxHeight: '100px' } })),\r\n                                React.createElement(\"br\", null),\r\n                                React.createElement(Row, null,\r\n                                    React.createElement(Col, { md: \"11\" },\r\n                                        React.createElement(\"span\", null,\r\n                                            imgContentType,\r\n                                            \", \",\r\n                                            byteSize(img))),\r\n                                    React.createElement(Col, { md: \"1\" },\r\n                                        React.createElement(Button, { color: \"danger\", onClick: this.clearBlob('img') },\r\n                                            React.createElement(FontAwesomeIcon, { icon: \"times-circle\" })))))) : null,\r\n                            React.createElement(\"input\", { id: \"file_img\", type: \"file\", onChange: this.onBlobChange(true, 'img'), accept: \"image/*\" }),\r\n                            React.createElement(AvInput, { type: \"hidden\", name: \"img\", value: img }))),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"expectionLabel\", for: \"expection\" }, \"Expection\"),\r\n                        React.createElement(AvField, { id: \"complain-expection\", type: \"text\", name: \"expection\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"showAnonymousLabel\", check: true },\r\n                            React.createElement(AvInput, { id: \"complain-showAnonymous\", type: \"checkbox\", className: \"form-control\", name: \"showAnonymous\" }),\r\n                            \"Show Anonymous\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"escalateLabel\", for: \"escalate\" }, \"Escalate\"),\r\n                        React.createElement(AvField, { id: \"complain-escalate\", type: \"text\", name: \"escalate\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"resolutionLabel\", for: \"resolution\" }, \"Resolution\"),\r\n                        React.createElement(AvField, { id: \"complain-resolution\", type: \"text\", name: \"resolution\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"department.id\" }, \"Department\"),\r\n                        React.createElement(AvInput, { id: \"complain-department\", type: \"select\", className: \"form-control\", name: \"department.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            departments\r\n                                ? departments.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.id)); })\r\n                                : null)),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"status.id\" }, \"Status\"),\r\n                        React.createElement(AvInput, { id: \"complain-status\", type: \"select\", className: \"form-control\", name: \"status.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            statuses\r\n                                ? statuses.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.id)); })\r\n                                : null)),\r\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/entity/complain\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" }, \"Back\")),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0 Save\")))))));\r\n    };\r\n    return ComplainUpdate;\r\n}(React.Component));\r\nexport { ComplainUpdate };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    departments: storeState.department.entities,\r\n    statuses: storeState.status.entities,\r\n    complainEntity: storeState.complain.entity,\r\n    loading: storeState.complain.loading,\r\n    updating: storeState.complain.updating,\r\n    updateSuccess: storeState.complain.updateSuccess\r\n}); };\r\nvar mapDispatchToProps = {\r\n    getDepartments: getDepartments,\r\n    getStatuses: getStatuses,\r\n    getEntity: getEntity,\r\n    updateEntity: updateEntity,\r\n    setBlob: setBlob,\r\n    createEntity: createEntity,\r\n    reset: reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ComplainUpdate);\r\n",{"version":3,"file":"G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\complain\\complain-update.tsx","sourceRoot":"","sources":["G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js!G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\complain\\complain-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Col, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport { ICrudGetAction, ICrudGetAllAction, setFileData, openFile, byteSize, ICrudPutAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IRootState } from 'app/shared/reducers';\n\nimport { IDepartment } from 'app/shared/model/department.model';\nimport { getEntities as getDepartments } from 'app/entities/department/department.reducer';\nimport { IStatus } from 'app/shared/model/status.model';\nimport { getEntities as getStatuses } from 'app/entities/status/status.reducer';\nimport { getEntity, updateEntity, createEntity, setBlob, reset } from './complain.reducer';\nimport { IComplain } from 'app/shared/model/complain.model';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from 'app/shared/util/date-utils';\nimport { mapIdList } from 'app/shared/util/entity-utils';\n\nexport interface IComplainUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n\nexport interface IComplainUpdateState {\n  isNew: boolean;\n  departmentId: string;\n  statusId: string;\n}\n\nexport class ComplainUpdate extends React.Component<IComplainUpdateProps, IComplainUpdateState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      departmentId: '0',\n      statusId: '0',\n      isNew: !this.props.match.params || !this.props.match.params.id\n    };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\n      this.handleClose();\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.isNew) {\n      this.props.reset();\n    } else {\n      this.props.getEntity(this.props.match.params.id);\n    }\n\n    this.props.getDepartments();\n    this.props.getStatuses();\n  }\n\n  onBlobChange = (isAnImage, name) => event => {\n    setFileData(event, (contentType, data) => this.props.setBlob(name, data, contentType), isAnImage);\n  };\n\n  clearBlob = name => () => {\n    this.props.setBlob(name, undefined, undefined);\n  };\n\n  saveEntity = (event, errors, values) => {\n    if (errors.length === 0) {\n      const { complainEntity } = this.props;\n      const entity = {\n        ...complainEntity,\n        ...values\n      };\n\n      if (this.state.isNew) {\n        this.props.createEntity(entity);\n      } else {\n        this.props.updateEntity(entity);\n      }\n    }\n  };\n\n  handleClose = () => {\n    this.props.history.push('/entity/complain');\n  };\n\n  render() {\n    const { complainEntity, departments, statuses, loading, updating } = this.props;\n    const { isNew } = this.state;\n\n    const { img, imgContentType } = complainEntity;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"complainportalApp.complain.home.createOrEditLabel\">Create or edit a Complain</h2>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm model={isNew ? {} : complainEntity} onSubmit={this.saveEntity}>\n                {!isNew ? (\n                  <AvGroup>\n                    <Label for=\"id\">ID</Label>\n                    <AvInput id=\"complain-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label id=\"detailsLabel\" for=\"details\">\n                    Details\n                  </Label>\n                  <AvField id=\"complain-details\" type=\"text\" name=\"details\" />\n                </AvGroup>\n                <AvGroup>\n                  <AvGroup>\n                    <Label id=\"imgLabel\" for=\"img\">\n                      Img\n                    </Label>\n                    <br />\n                    {img ? (\n                      <div>\n                        <a onClick={openFile(imgContentType, img)}>\n                          <img src={`data:${imgContentType};base64,${img}`} style={{ maxHeight: '100px' }} />\n                        </a>\n                        <br />\n                        <Row>\n                          <Col md=\"11\">\n                            <span>\n                              {imgContentType}, {byteSize(img)}\n                            </span>\n                          </Col>\n                          <Col md=\"1\">\n                            <Button color=\"danger\" onClick={this.clearBlob('img')}>\n                              <FontAwesomeIcon icon=\"times-circle\" />\n                            </Button>\n                          </Col>\n                        </Row>\n                      </div>\n                    ) : null}\n                    <input id=\"file_img\" type=\"file\" onChange={this.onBlobChange(true, 'img')} accept=\"image/*\" />\n                    <AvInput type=\"hidden\" name=\"img\" value={img} />\n                  </AvGroup>\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"expectionLabel\" for=\"expection\">\n                    Expection\n                  </Label>\n                  <AvField id=\"complain-expection\" type=\"text\" name=\"expection\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"showAnonymousLabel\" check>\n                    <AvInput id=\"complain-showAnonymous\" type=\"checkbox\" className=\"form-control\" name=\"showAnonymous\" />\n                    Show Anonymous\n                  </Label>\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"escalateLabel\" for=\"escalate\">\n                    Escalate\n                  </Label>\n                  <AvField id=\"complain-escalate\" type=\"text\" name=\"escalate\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"resolutionLabel\" for=\"resolution\">\n                    Resolution\n                  </Label>\n                  <AvField id=\"complain-resolution\" type=\"text\" name=\"resolution\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"department.id\">Department</Label>\n                  <AvInput id=\"complain-department\" type=\"select\" className=\"form-control\" name=\"department.id\">\n                    <option value=\"\" key=\"0\" />\n                    {departments\n                      ? departments.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.id}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"status.id\">Status</Label>\n                  <AvInput id=\"complain-status\" type=\"select\" className=\"form-control\" name=\"status.id\">\n                    <option value=\"\" key=\"0\" />\n                    {statuses\n                      ? statuses.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.id}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <Button tag={Link} id=\"cancel-save\" to=\"/entity/complain\" replace color=\"info\">\n                  <FontAwesomeIcon icon=\"arrow-left\" />&nbsp;\n                  <span className=\"d-none d-md-inline\">Back</span>\n                </Button>\n                &nbsp;\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\n                  <FontAwesomeIcon icon=\"save\" />&nbsp; Save\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  departments: storeState.department.entities,\n  statuses: storeState.status.entities,\n  complainEntity: storeState.complain.entity,\n  loading: storeState.complain.loading,\n  updating: storeState.complain.updating,\n  updateSuccess: storeState.complain.updateSuccess\n});\n\nconst mapDispatchToProps = {\n  getDepartments,\n  getStatuses,\n  getEntity,\n  updateEntity,\n  setBlob,\n  createEntity,\n  reset\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ComplainUpdate);\n"]}]}