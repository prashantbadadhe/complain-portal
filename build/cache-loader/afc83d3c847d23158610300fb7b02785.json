{"remainingRequest":"G:\\projects\\complain-portal\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\complain-portal\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js!G:\\projects\\complain-portal\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-delete-dialog.tsx","dependencies":[{"path":"G:\\projects\\complain-portal\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-delete-dialog.tsx","mtime":1543222006000},{"path":"G:\\projects\\complain-portal\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"G:\\projects\\complain-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1569703604290},{"path":"G:\\projects\\complain-portal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\projects\\complain-portal\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getUser, deleteUser } from './user-management.reducer';\r\nvar UserManagementDeleteDialog = /** @class */ (function (_super) {\r\n    tslib_1.__extends(UserManagementDeleteDialog, _super);\r\n    function UserManagementDeleteDialog() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.confirmDelete = function (event) {\r\n            _this.props.deleteUser(_this.props.user.login);\r\n            _this.handleClose(event);\r\n        };\r\n        _this.handleClose = function (event) {\r\n            event.stopPropagation();\r\n            _this.props.history.goBack();\r\n        };\r\n        return _this;\r\n    }\r\n    UserManagementDeleteDialog.prototype.componentDidMount = function () {\r\n        this.props.getUser(this.props.match.params.login);\r\n    };\r\n    UserManagementDeleteDialog.prototype.render = function () {\r\n        var user = this.props.user;\r\n        return (React.createElement(Modal, { isOpen: true, toggle: this.handleClose },\r\n            React.createElement(ModalHeader, { toggle: this.handleClose }, \"Confirm delete operation\"),\r\n            React.createElement(ModalBody, null, \"Are you sure you want to delete this User?\"),\r\n            React.createElement(ModalFooter, null,\r\n                React.createElement(Button, { color: \"secondary\", onClick: this.handleClose },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"ban\" }),\r\n                    \"\\u00A0 Cancel\"),\r\n                React.createElement(Button, { color: \"danger\", onClick: this.confirmDelete },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"trash\" }),\r\n                    \"\\u00A0 Delete\"))));\r\n    };\r\n    return UserManagementDeleteDialog;\r\n}(React.Component));\r\nexport { UserManagementDeleteDialog };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    user: storeState.userManagement.user\r\n}); };\r\nvar mapDispatchToProps = { getUser: getUser, deleteUser: deleteUser };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementDeleteDialog);\r\n",{"version":3,"file":"G:\\projects\\complain-portal\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-delete-dialog.tsx","sourceRoot":"","sources":["G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js!G:\\projects\\complain-portal\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-delete-dialog.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAEtC,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAEhF,OAAO,EAAE,eAAe,EAAE,MAAM,gCAAgC,CAAC;AAGjE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAKhE;IAAgD,sDAAiD;IAAjG;QAAA,qEAkCC;QA7BC,mBAAa,GAAG,UAAA,KAAK;YACnB,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7C,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAC;QAEF,iBAAW,GAAG,UAAA,KAAK;YACjB,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QAC9B,CAAC,CAAC;;IAqBJ,CAAC;IAjCC,sDAAiB,GAAjB;QACE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAYD,2CAAM,GAAN;QACU,IAAA,sBAAI,CAAgB;QAC5B,OAAO,CACL,oBAAC,KAAK,IAAC,MAAM,QAAC,MAAM,EAAE,IAAI,CAAC,WAAW;YACpC,oBAAC,WAAW,IAAC,MAAM,EAAE,IAAI,CAAC,WAAW,+BAAwC;YAC7E,oBAAC,SAAS,qDAAuD;YACjE,oBAAC,WAAW;gBACV,oBAAC,MAAM,IAAC,KAAK,EAAC,WAAW,EAAC,OAAO,EAAE,IAAI,CAAC,WAAW;oBACjD,oBAAC,eAAe,IAAC,IAAI,EAAC,KAAK,GAAG;oCAEvB;gBACT,oBAAC,MAAM,IAAC,KAAK,EAAC,QAAQ,EAAC,OAAO,EAAE,IAAI,CAAC,aAAa;oBAChD,oBAAC,eAAe,IAAC,IAAI,EAAC,OAAO,GAAG;oCAEzB,CACG,CACR,CACT,CAAC;IACJ,CAAC;IACH,iCAAC;AAAD,CAAC,AAlCD,CAAgD,KAAK,CAAC,SAAS,GAkC9D;;AAED,IAAM,eAAe,GAAG,UAAC,UAAsB,IAAK,OAAA,CAAC;IACnD,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,IAAI;CACrC,CAAC,EAFkD,CAElD,CAAC;AAEH,IAAM,kBAAkB,GAAG,EAAE,OAAO,SAAA,EAAE,UAAU,YAAA,EAAE,CAAC;AAKnD,eAAe,OAAO,CACpB,eAAe,EACf,kBAAkB,CACnB,CAAC,0BAA0B,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IUser } from 'app/shared/model/user.model';\nimport { getUser, deleteUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n\nexport class UserManagementDeleteDialog extends React.Component<IUserManagementDeleteDialogProps> {\n  componentDidMount() {\n    this.props.getUser(this.props.match.params.login);\n  }\n\n  confirmDelete = event => {\n    this.props.deleteUser(this.props.user.login);\n    this.handleClose(event);\n  };\n\n  handleClose = event => {\n    event.stopPropagation();\n    this.props.history.goBack();\n  };\n\n  render() {\n    const { user } = this.props;\n    return (\n      <Modal isOpen toggle={this.handleClose}>\n        <ModalHeader toggle={this.handleClose}>Confirm delete operation</ModalHeader>\n        <ModalBody>Are you sure you want to delete this User?</ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={this.handleClose}>\n            <FontAwesomeIcon icon=\"ban\" />\n            &nbsp; Cancel\n          </Button>\n          <Button color=\"danger\" onClick={this.confirmDelete}>\n            <FontAwesomeIcon icon=\"trash\" />\n            &nbsp; Delete\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser, deleteUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementDeleteDialog);\n"]}]}