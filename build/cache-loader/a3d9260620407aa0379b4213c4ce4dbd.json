{"remainingRequest":"G:\\projects\\complain-portal\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\complain-portal\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js!G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\branch\\branch-update.tsx","dependencies":[{"path":"G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\branch\\branch-update.tsx","mtime":1543222006000},{"path":"G:\\projects\\complain-portal\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"G:\\projects\\complain-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1569703604290},{"path":"G:\\projects\\complain-portal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\projects\\complain-portal\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities as getLocations } from 'app/entities/location/location.reducer';\r\nimport { getEntities as getCompanies } from 'app/entities/company/company.reducer';\r\nimport { getEntity, updateEntity, createEntity, reset } from './branch.reducer';\r\nvar BranchUpdate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(BranchUpdate, _super);\r\n    function BranchUpdate(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.saveEntity = function (event, errors, values) {\r\n            if (errors.length === 0) {\r\n                var branchEntity = _this.props.branchEntity;\r\n                var entity = tslib_1.__assign({}, branchEntity, values);\r\n                if (_this.state.isNew) {\r\n                    _this.props.createEntity(entity);\r\n                }\r\n                else {\r\n                    _this.props.updateEntity(entity);\r\n                }\r\n            }\r\n        };\r\n        _this.handleClose = function () {\r\n            _this.props.history.push('/entity/branch');\r\n        };\r\n        _this.state = {\r\n            locationId: '0',\r\n            companyId: '0',\r\n            isNew: !_this.props.match.params || !_this.props.match.params.id\r\n        };\r\n        return _this;\r\n    }\r\n    BranchUpdate.prototype.componentWillUpdate = function (nextProps, nextState) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.handleClose();\r\n        }\r\n    };\r\n    BranchUpdate.prototype.componentDidMount = function () {\r\n        if (this.state.isNew) {\r\n            this.props.reset();\r\n        }\r\n        else {\r\n            this.props.getEntity(this.props.match.params.id);\r\n        }\r\n        this.props.getLocations();\r\n        this.props.getCompanies();\r\n    };\r\n    BranchUpdate.prototype.render = function () {\r\n        var _a = this.props, branchEntity = _a.branchEntity, locations = _a.locations, companies = _a.companies, loading = _a.loading, updating = _a.updating;\r\n        var isNew = this.state.isNew;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"complainportalApp.branch.home.createOrEditLabel\" }, \"Create or edit a Branch\"))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : branchEntity, onSubmit: this.saveEntity },\r\n                    !isNew ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"id\" }, \"ID\"),\r\n                        React.createElement(AvInput, { id: \"branch-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"branchNameLabel\", for: \"branchName\" }, \"Branch Name\"),\r\n                        React.createElement(AvField, { id: \"branch-branchName\", type: \"text\", name: \"branchName\", validate: {\r\n                                required: { value: true, errorMessage: 'This field is required.' }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"phoneLabel\", for: \"phone\" }, \"Phone\"),\r\n                        React.createElement(AvField, { id: \"branch-phone\", type: \"text\", name: \"phone\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"emailLabel\", for: \"email\" }, \"Email\"),\r\n                        React.createElement(AvField, { id: \"branch-email\", type: \"text\", name: \"email\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"location.id\" }, \"Location\"),\r\n                        React.createElement(AvInput, { id: \"branch-location\", type: \"select\", className: \"form-control\", name: \"location.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            locations\r\n                                ? locations.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.id)); })\r\n                                : null)),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"company.id\" }, \"Company\"),\r\n                        React.createElement(AvInput, { id: \"branch-company\", type: \"select\", className: \"form-control\", name: \"company.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            companies\r\n                                ? companies.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.id)); })\r\n                                : null)),\r\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/entity/branch\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" }, \"Back\")),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0 Save\")))))));\r\n    };\r\n    return BranchUpdate;\r\n}(React.Component));\r\nexport { BranchUpdate };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    locations: storeState.location.entities,\r\n    companies: storeState.company.entities,\r\n    branchEntity: storeState.branch.entity,\r\n    loading: storeState.branch.loading,\r\n    updating: storeState.branch.updating,\r\n    updateSuccess: storeState.branch.updateSuccess\r\n}); };\r\nvar mapDispatchToProps = {\r\n    getLocations: getLocations,\r\n    getCompanies: getCompanies,\r\n    getEntity: getEntity,\r\n    updateEntity: updateEntity,\r\n    createEntity: createEntity,\r\n    reset: reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BranchUpdate);\r\n",{"version":3,"file":"G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\branch\\branch-update.tsx","sourceRoot":"","sources":["G:\\projects\\complain-portal\\node_modules\\tslint-loader\\index.js!G:\\projects\\complain-portal\\src\\main\\webapp\\app\\entities\\branch\\branch-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Col, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport { ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IRootState } from 'app/shared/reducers';\n\nimport { ILocation } from 'app/shared/model/location.model';\nimport { getEntities as getLocations } from 'app/entities/location/location.reducer';\nimport { ICompany } from 'app/shared/model/company.model';\nimport { getEntities as getCompanies } from 'app/entities/company/company.reducer';\nimport { getEntity, updateEntity, createEntity, reset } from './branch.reducer';\nimport { IBranch } from 'app/shared/model/branch.model';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from 'app/shared/util/date-utils';\nimport { mapIdList } from 'app/shared/util/entity-utils';\n\nexport interface IBranchUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n\nexport interface IBranchUpdateState {\n  isNew: boolean;\n  locationId: string;\n  companyId: string;\n}\n\nexport class BranchUpdate extends React.Component<IBranchUpdateProps, IBranchUpdateState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locationId: '0',\n      companyId: '0',\n      isNew: !this.props.match.params || !this.props.match.params.id\n    };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\n      this.handleClose();\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.isNew) {\n      this.props.reset();\n    } else {\n      this.props.getEntity(this.props.match.params.id);\n    }\n\n    this.props.getLocations();\n    this.props.getCompanies();\n  }\n\n  saveEntity = (event, errors, values) => {\n    if (errors.length === 0) {\n      const { branchEntity } = this.props;\n      const entity = {\n        ...branchEntity,\n        ...values\n      };\n\n      if (this.state.isNew) {\n        this.props.createEntity(entity);\n      } else {\n        this.props.updateEntity(entity);\n      }\n    }\n  };\n\n  handleClose = () => {\n    this.props.history.push('/entity/branch');\n  };\n\n  render() {\n    const { branchEntity, locations, companies, loading, updating } = this.props;\n    const { isNew } = this.state;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"complainportalApp.branch.home.createOrEditLabel\">Create or edit a Branch</h2>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm model={isNew ? {} : branchEntity} onSubmit={this.saveEntity}>\n                {!isNew ? (\n                  <AvGroup>\n                    <Label for=\"id\">ID</Label>\n                    <AvInput id=\"branch-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label id=\"branchNameLabel\" for=\"branchName\">\n                    Branch Name\n                  </Label>\n                  <AvField\n                    id=\"branch-branchName\"\n                    type=\"text\"\n                    name=\"branchName\"\n                    validate={{\n                      required: { value: true, errorMessage: 'This field is required.' }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"phoneLabel\" for=\"phone\">\n                    Phone\n                  </Label>\n                  <AvField id=\"branch-phone\" type=\"text\" name=\"phone\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"emailLabel\" for=\"email\">\n                    Email\n                  </Label>\n                  <AvField id=\"branch-email\" type=\"text\" name=\"email\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"location.id\">Location</Label>\n                  <AvInput id=\"branch-location\" type=\"select\" className=\"form-control\" name=\"location.id\">\n                    <option value=\"\" key=\"0\" />\n                    {locations\n                      ? locations.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.id}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"company.id\">Company</Label>\n                  <AvInput id=\"branch-company\" type=\"select\" className=\"form-control\" name=\"company.id\">\n                    <option value=\"\" key=\"0\" />\n                    {companies\n                      ? companies.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.id}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <Button tag={Link} id=\"cancel-save\" to=\"/entity/branch\" replace color=\"info\">\n                  <FontAwesomeIcon icon=\"arrow-left\" />&nbsp;\n                  <span className=\"d-none d-md-inline\">Back</span>\n                </Button>\n                &nbsp;\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\n                  <FontAwesomeIcon icon=\"save\" />&nbsp; Save\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  locations: storeState.location.entities,\n  companies: storeState.company.entities,\n  branchEntity: storeState.branch.entity,\n  loading: storeState.branch.loading,\n  updating: storeState.branch.updating,\n  updateSuccess: storeState.branch.updateSuccess\n});\n\nconst mapDispatchToProps = {\n  getLocations,\n  getCompanies,\n  getEntity,\n  updateEntity,\n  createEntity,\n  reset\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BranchUpdate);\n"]}]}